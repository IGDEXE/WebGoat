# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main


pool:
  vmImage: 'ubuntu-latest'

steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    publishJUnitResults: false
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    mavenVersionOption: 'Default'
    mavenOptions: '-DskipTests'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false
  displayName: 'Build'

- task: CopyFiles@2
  inputs:
    Contents: '**/**.jar'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      find -type f -name "*.war"
      cd $(build.artifactstagingdirectory)
      find -type f -name "*.jar"
- task: Veracode@3
  inputs:
    ConnectionDetailsSelection: 'Credentials'
    apiId: '$(APIID)'
    apiKey: '$(APIKEY)'
    veracodeAppProfile: 'AzDevOps.WebGoat'
    version: '$(build.buildNumber)'
    filepath: '$(build.artifactstagingdirectory)'
    createSandBox: false
    createProfile: true
    failTheBuildIfVeracodeScanDidNotInitiate: false
    scanStatusCheckInterval: '60'
    importResults: true
    failBuildOnPolicyFail: false
  displayName: 'SAST'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      export SRCCLR_SCM_URI=$(Build.Repository.Uri)
      export SRCCLR_SCM_REF=$(Build.SourceBranch)
      export SRCCLR_SCM_REV=$(Build.SourceVersion)
      #curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan -url https://github.com/IGDEXE/NodeGoat
      curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan
    workingDirectory: '$(Build.ArtifactStagingDirectory)'
  displayName: 'SRCCLR'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Configuracoes
      urlDownloadAPI="https://repo1.maven.org/maven2/com/veracode/vosp/api/wrappers/vosp-api-wrappers-java/20.12.7.3/vosp-api-wrappers-java-20.12.7.3.jar"
      veracodeID="$(APIID)"
      veracodeAPIkey="$(APIKEY)"
      appID="$(APPID)"
      caminhoArquivo="$(build.artifactstagingdirectory)"
      numeroVersao=$(date +%H%M%s%d%m%y)
      # Faz o download da ferramenta
      curl -L -o VeracodeJavaAPI.jar $urlDownloadAPI
      # Utiliza a ferramenta
      java -jar VeracodeJavaAPI.jar -vid $veracodeID -vkey $veracodeAPIkey -action UploadAndScanByAppId -appid "$appID" -filepath "$caminhoArquivo" -version $numeroVersao
  displayName: 'Wrapper UploadAndScanByAppId'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Configuracoes
      urlPipeScan="https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip"
      veracodeID="$(APIID)"
      veracodeAPIkey="$(APIKEY)"
      caminhoArquivo="$(build.artifactstagingdirectory)/*.jar"
      
      # Faz o download da ferramenta
      curl -o pipescan.zip $urlPipeScan
      # Descompacta a ferramenta
      unzip -o pipescan.zip -d "./"
      # Faz a analise
      java -jar "pipeline-scan.jar" -f "$caminhoArquivo" -vid $veracodeID -vkey $veracodeAPIkey
    workingDirectory: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Pipeline Scan'